# SYSTEM/SYSTEM/settings.py

"""
Django settings for SYSTEM project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/
"""

from pathlib import Path
import os # Keep this import at the top as it's used for STATIC_ROOT and TEMPLATES

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

SECRET_KEY = "django-insecure-i4#xc4(t2g$nbu=-)n&z-j1-b-y!_a+txs_^ffjtjz-sd_-j%r"

DEBUG = True

ALLOWED_HOSTS = [
    'vincentkiplangat.engineer',
    'www.vincentkiplangat.engineer',
    '127.0.0.1',
    'localhost',
]



# Application definition

INSTALLED_APPS = [
    "jazzmin",  
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "inventory",
    'accounts',
    'widget_tweaks',
    'crispy_forms',
    'crispy_bootstrap5',
]

# Crispy Forms settings (if you're using them)
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "SYSTEM.urls"

# --- TEMPLATES Configuration (SINGLE, CORRECT DEFINITION) ---
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        # DIRS should point to your project-wide 'templates' directory
        "DIRS": [os.path.join(BASE_DIR, "templates")], # Use os.path.join for compatibility
        "APP_DIRS": True, # This allows Django to find templates inside app's 'templates' subdirectories
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "SYSTEM.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles") # Used for `collectstatic`

# If you have static files directly in app's static/ directories (like inventory/static/inventory/assets/)
# Django's `APP_DIRS: True` in TEMPLATES handles finding them.
# No need for STATICFILES_DIRS unless you have project-wide static files outside of apps.


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# --- Custom User Model Configuration ---
AUTH_USER_MODEL = 'accounts.CustomUser'

# --- Authentication Redirect URLs ---
# URL to redirect to after successful login (and often registration)
LOGIN_REDIRECT_URL = 'inventory_home' 

# URL to redirect to if a user tries to access a @login_required page without logging in
LOGIN_URL = 'login' 


# --- Email Settings for Password Reset (Development Configuration) ---
# This tells Django to print emails to the console (terminal)
# where your `python manage.py runserver` command is running.
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend' 

# This is crucial for Django to build correct password reset links in the email.
# It should be the base URL of your site. For local development, it's usually:
SITE_URL = 'http://127.0.0.1:8000' 

# In a production environment, you would change EMAIL_BACKEND and add SMTP settings like:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.your-email-provider.com'
# EMAIL_PORT = 587 # Or 465 for SSL
# EMAIL_USE_TLS = True # Or EMAIL_USE_SSL = True for port 465
# EMAIL_HOST_USER = 'your_email@example.com'
# EMAIL_HOST_PASSWORD = 'your_email_password_or_app_password'
# DEFAULT_FROM_EMAIL = 'noreply@tensenses.com'
# SERVER_EMAIL = 'errors@tensenses.com' # For server error notifications


# SYSTEM/SYSTEM/settings.py

# Jazzmin settings
JAZZMIN_SETTINGS = {
    # Title of the admin site (appears in browser tab)
    "site_title": "TenSenses Admin",

    # Title of the admin site (appears in the sidebar brand)
    "site_header": "TenSenses",

    # Brand text in the sidebar (optional, defaults to site_header)
    "site_brand": "TenSenses Factory",

    # Logo to use for the site, relative to your static files
    "site_logo": "inventory/assets/images/log.jpg",

    # Welcome text for the login screen
    "welcome_sign": "Welcome to the TenSenses Admin Panel",

    # Copyright text for the footer
    "copyright": "TenSenses Factory Ltd.",

    # The search bar in the admin sidebar
    "search_model": ["accounts.CustomUser"],

    # Links to appear in the top right navigation
    "topbar_links": [
        {"name": "Support", "url": "https://github.com/farridav/django-jazzmin/issues", "new_window": True},
        {"model": "auth.user", "username": True, "display_name": True, "display_email": True},
    ],

    # Sidebar configuration
    "show_sidebar": True,
    "user_info": False,  # Hides user info in sidebar
    "navigation_expanded": True,

    # Customization for the user menu in the top right
    "usermenu_links": [
        # {"model": "auth.user", "username": True, "display_name": True, "display_email": True},
        # {"name": "Change Password", "url": "admin:password_change", "icon": "fas fa-lock"},
        # {"name": "Log out", "url": "admin:logout", "icon": "fas fa-sign-out-alt"},
    ],

    # UI Tweaks
    "changeform_format": "horizontal_tabs",
    "related_modal_active": True,

    # Custom UI parameters
    "custom_css": "inventory/assets/css/jazzmin_custom.css",  # Added path to custom CSS
    "custom_js": None,
    "show_ui_builder": False,

    # Themes
    "default_icon_parents": "fas fa-chevron-circle-right",
    "default_icon_children": "fas fa-circle",
    "use_google_fonts_cdn": True,
}

JAZZMIN_UI_TWEAKS = {
    "navbar_small_text": False,
    "footer_small_text": False,
    "body_small_text": False,
    "brand_small_text": False,
    "brand_colour": "navbar-dark",
    "accent": "accent-primary",
    "navbar": "navbar-white navbar-light",
    "no_navbar_border": False,
    "navbar_fixed": False,
    "layout_boxed": False,
    "footer_fixed": False,
    "sidebar_changenav_type": "accordion",
    "sidebar_nav_small_text": False,
    "sidebar_disable_expand": False,
    "sidebar_nav_child_indent": True,
    "sidebar_nav_compact_style": False,
    "sidebar_nav_legacy_style": False,
    "sidebar_nav_flat_style": False,
    "theme": "flatly",
    "dark_mode_theme": None,
    "button_classes": {
        "primary": "btn-outline-primary",
        "secondary": "btn-outline-secondary",
        "info": "btn-info",
        "warning": "btn-warning",
        "danger": "btn-danger",
        "success": "btn-success"
    },
    "actions_classes": {
        "btn-danger": "btn-danger"
    }
}


# Add custom CSS to Jazzmin to match your brown theme
# Create a static file for this: inventory/static/inventory/css/jazzmin_custom.css
JAZZMIN_SETTINGS["custom_css"] = "inventory/assets/css/jazzmin_custom.css"

# Set to True to expire the session when the user closes their browser.
# This means the session cookie will be deleted when the browser window is closed.
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Set the maximum age of the session cookie in seconds.
# After this period of inactivity, the user will be logged out.
# Example: 1200 seconds = 20 minutes of inactivity
# Example: 3600 seconds = 1 hour of inactivity
# Choose a value appropriate for your application's security and user experience needs.
SESSION_COOKIE_AGE = 1800 # 30 minutes (adjust as needed)

# If you want to save the session data on every request, even if it hasn't changed.
# Setting this to False can improve performance but might require more careful session management
# if you're relying on session data changing frequently. For simple logout on inactivity,
# False is generally fine.
SESSION_SAVE_EVERY_REQUEST = False # Set to False for better performance unless needed
